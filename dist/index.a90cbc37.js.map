{"mappings":"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","sources":["<anon>","script.js"],"sourcesContent":["const codeGuesses = Array.from(document.querySelectorAll(\".guess-and-color-selection\"));\nconst colors = [\n    \"blue\",\n    \"grey\",\n    \"yellow\",\n    \"red\",\n    \"orange\",\n    \"green\",\n    \"white\",\n    \"pink\"\n];\nconst containerColors = document.querySelector(\".container-colors\");\nlet pastGuesses = [];\nconst errorContainer = document.getElementById(\"error-container\");\nconst successContainer = document.getElementById(\"success-container\");\nconst hintElementContainer = document.querySelector(\".hint-information\");\nconst sidebarRules = document.querySelector(\".rules\");\nconst submitBtn = document.querySelector(\".submit-button\");\nconst toggleSidebarBtn = document.querySelector(\".toggle-sidebar\");\nconst resetBtn = document.querySelector(\".reset\");\nconst pastGuessesContainer = document.querySelector(\".past-guesses\");\nlet guessesLeft = 10;\nlet playerWon = false;\nclass Guess {\n    guess;\n    allColors;\n    #parentElement = document.querySelector(\".past-guesses\");\n    #hintElementContainer = document.querySelector(\".hint-information\");\n    #rightColorRightSpot;\n    #rightColorWrongSpot;\n    #wrongColor;\n    constructor(guess, rightColorRightSpot, rightColorWrongSpot, wrongColor){\n        this.guess = [\n            ...guess\n        ];\n        this.#rightColorRightSpot = rightColorRightSpot;\n        this.#rightColorWrongSpot = rightColorWrongSpot;\n        this.#wrongColor = wrongColor;\n        this.allColors = this.guess.join(\",\");\n    }\n    renderGuess() {\n        //EDIT AFTERWARDS TO ADD ICONS\n        const htmlGuessLog = `<div data-id = \"${pastGuesses.indexOf(this) + 1}\"class=\"past-guess past-guess-${(pastGuesses.indexOf(this) + 1) % 2 === 0 ? \"even\" : \"odd\"}\">\r\n        <div data-id = \"${pastGuesses.indexOf(this) + 1}\"class=\"spot-icon right-color-right-spot-icon\">${this.#rightColorRightSpot}</div>\r\n        <div data-id = \"${pastGuesses.indexOf(this) + 1}\"class=\"black-box-code\">\r\n            <div data-id = \"${pastGuesses.indexOf(this) + 1}\"class=\"past-guess-colors\">\r\n                <div class=\"past-guess-color color-${this.guess[0]}\" data-id = \"${pastGuesses.indexOf(this) + 1}\"data-color = \"${this.guess[0]}\"></div>\r\n                <div class=\"past-guess-color color-${this.guess[1]}\" data-id = \"${pastGuesses.indexOf(this) + 1}\"data-color = \"${this.guess[1]}\"></div>\r\n                <div class=\"past-guess-color color-${this.guess[2]}\" data-id = \"${pastGuesses.indexOf(this) + 1}\"data-color = \"${this.guess[2]}\"></div>\r\n                <div class=\"past-guess-color color-${this.guess[3]}\" data-id = \"${pastGuesses.indexOf(this) + 1}\"data-color = \"${this.guess[3]}\"></div>\r\n            </div>\r\n        </div>\r\n        <div data-id = \"${pastGuesses.indexOf(this) + 1}\"class=\"spot-icon right-color-wrong-spot-icon\">${this.#rightColorWrongSpot}</div>\r\n\r\n\r\n</div>`;\n        const htmlHintBox = `<li class=\"clue right-color-right-spot\">\r\n<div\r\n  class=\"hint-icon spot-icon right-color-right-spot-icon\"\r\n></div>\r\n<p class=\"guess-infomation\">\r\n  ${this.#rightColorRightSpot} color${this.#rightColorRightSpot > 1 || this.#rightColorRightSpot === 0 ? \"s are\" : \" is\"} in the code, and in the right spot\r\n</p>\r\n</li>\r\n<li class=\"clue right-color-wrong-spot\">\r\n<div\r\n  class=\"hint-icon spot-icon right-color-wrong-spot-icon\"\r\n></div>\r\n<p class=\"guess-infomation\">\r\n  ${this.#rightColorWrongSpot} color${this.#rightColorWrongSpot > 1 || this.rightColorWrongSpot === 0 ? \"s are\" : \" is\"} in the code, but in the wrong spot\r\n</p>\r\n</li>\r\n<li class=\"clue wrong-color\">\r\n<div class=\"hint-icon spot-icon wrong-color-icon\"></div>\r\n<p class=\"guess-infomation\">\r\n  ${this.#wrongColor} color${this.#wrongColor > 1 || this.#wrongColor === 0 ? \"s are\" : \" is\"} not in the code at all\r\n</p>\r\n</li>\r\n\r\n</ul>`;\n        this.#parentElement.insertAdjacentHTML(\"afterbegin\", htmlGuessLog);\n        this.#hintElementContainer.classList.remove(\"deleted\");\n        this.#hintElementContainer.innerHTML = \"\";\n        this.#hintElementContainer.insertAdjacentHTML(\"afterbegin\", htmlHintBox);\n    }\n}\nconst initializeCode = function() {\n    const uniqueCode = new Set();\n    while(uniqueCode.size < 4)uniqueCode.add(colors[Math.floor(Math.random() * colors.length)]);\n    return [\n        ...uniqueCode\n    ];\n};\nconst gameInit = function() {\n    codeGuesses.forEach(function(el, i) {\n        el.insertAdjacentHTML(\"afterbegin\", `<div class=\"color-selector hidden\" data-guess-num=\"${i + 1}\">\r\n    <button data-color=\"red\"title=\"color\" class=\"color color-red\"></button>\r\n    <button data-color=\"blue\" title=\"color\" class=\"color color-blue\"></button>\r\n    <button data-color=\"green\"title=\"color\" class=\"color color-green\"></button>\r\n    <button data-color=\"yellow\" title=\"color\" class=\"color color-yellow\"></button>\r\n    <button data-color=\"orange\"title=\"color\" class=\"color color-orange\"></button>\r\n    <button data-color=\"pink\"title=\"color\" class=\"color color-pink\"></button>\r\n    <button data-color=\"grey\"title=\"color\" class=\"color color-grey\"></button>\r\n    <button data-color=\"white\"title=\"color\" class=\"color color-white\"></button>\r\n\r\n    </button>\r\n</div>`);\n    });\n};\nconst code = initializeCode();\ngameInit();\nconst guessInit = function() {\n    const guess = new Array(4);\n    guess.fill(\"_\");\n    codeGuesses.forEach(function(codeGuess) {\n        codeGuess.querySelector(\".color-guess\").addEventListener(\"mouseenter\", function(e) {\n            const colorSelector = codeGuess.querySelector(\".color-selector\");\n            colorSelector.classList.remove(\"hidden\");\n            if (!errorContainer.classList.contains(\"deleted\")) errorContainer.classList.add(\"deleted\");\n            codeGuess.addEventListener(\"mouseleave\", function(e) {\n                colorSelector.classList.add(\"hidden\");\n            });\n        });\n    });\n    containerColors.addEventListener(\"click\", function(e) {\n        if (e.target.closest(\".color\")) {\n            const guessPosition = e.target.parentElement.dataset.guessNum;\n            const color = e.target.dataset.color;\n            guess[guessPosition - 1] = color;\n            e.target.parentElement.parentElement.querySelector(\".color-guess\").style.backgroundColor = color;\n        }\n    //FIX AFTERWARDS TO ADD CLICK EVENT\n    //     if (e.target.closest('color-guess')) {\n    //        //CODE GOES HERE\n    //     }\n    });\n    pastGuessesContainer.addEventListener(\"click\", function(e) {\n        const clickTarget = e.target;\n        if (e.target.closest(\".past-guess\")) {\n            const id = clickTarget.dataset.id;\n            const container = Array.from(document.querySelectorAll(\".past-guess\")).reduce((containerEl, curEl)=>curEl.dataset.id === id ? curEl : containerEl, \"\");\n            const pastGuessedColors = container.querySelectorAll(\".past-guess-color\");\n            pastGuessedColors.forEach(function(passedGuessedColorEl, i) {\n                const color = passedGuessedColorEl.dataset.color;\n                guess[i] = color;\n                // pastGuesses[id - 1].guess[id - 1] = color;\n                document.querySelectorAll(\".color-guess\")[i].style.backgroundColor = color;\n            });\n        }\n    });\n    toggleSidebarBtn.addEventListener(\"click\", function(e) {\n        e.preventDefault();\n        sidebarRules.classList.toggle(\"hidden-sidebar\");\n        const status = sidebarRules.classList.contains(\"hidden-sidebar\") ? \"hidden\" : \"showing\";\n        toggleSidebarBtn.textContent = `${status === \"hidden\" ? \"Show\" : \"Hide\"} Rules!`;\n    });\n    return guess;\n};\nconst guess = guessInit();\n//Function that will check the guess, some some actions but ultimately will will return true or false based on whether the user got the code right or not\nconst checkGuess = function(guess, code) {\n    let rightColorWrongSpot = 0;\n    let rightColorRightSpot = 0;\n    let wrongColor = 0;\n    try {\n        if (guessesLeft < 1) throw new Error(`Error: No guesses remaining. To start over, click the \"Start Over\" button`);\n        if (playerWon) throw new Error('You have already guessed the code! Please click the \"Start Over\" button to play again!');\n        if (guess.includes(\"_\")) throw new Error(\"Error: Some guesses have not been assigned a color\");\n        if (pastGuesses.some((pastGuess)=>pastGuess.guess.join(\"\") === guess.join(\"\"))) throw new Error(\"Error : Sequence has already been guessed\");\n        if (new Set(guess).size < 4) throw new Error(\"Error: No duplicate colors allowed\");\n        guess.forEach(function(color, i) {\n            if (code.includes(color)) {\n                if (code[i] === color) rightColorRightSpot++;\n                else rightColorWrongSpot++;\n            } else wrongColor++;\n        });\n        if (rightColorRightSpot < 4) {\n            pastGuesses.push(new Guess([\n                ...guess\n            ], rightColorRightSpot, rightColorWrongSpot, wrongColor));\n            pastGuesses[pastGuesses.length - 1].renderGuess();\n            guessesLeft--; //MOVE TO DIFFERENT FUNCTION AFTERWARDS\n            if (guessesLeft < 1) throw new Error(`Sorry, you have run out of guesses! The correct guess was:`);\n            guess.fill(\"_\");\n            document.querySelectorAll(\".color-guess\").forEach((el)=>el.style.backgroundColor = \"white\");\n        } else {\n            //END GAME - PROMPT USER TO CLICK A NEW BUTTON TO START OVER\n            //   successContainer.classList?.remove(\"deleted\");\n            successContainer.classList.remove(\"deleted\");\n            successContainer.querySelector(\".message-text\").textContent = 'You guessed the code! Congratulations! If you want to play again, click the \"Start Over\" button!';\n            playerWon = true;\n            hintElementContainer.classList.add(\"deleted\");\n        }\n    } catch (err) {\n        successContainer.classList.add(\"deleted\");\n        // document.querySelector('.header-mastermind').style.marginBotton = '12.8rem'\n        errorContainer.classList.remove(\"deleted\");\n        hintElementContainer.classList.add(\"deleted\");\n        errorContainer.querySelector(\".message-text\").textContent = err.message;\n        if (err.message.startsWith(\"Sorry,\") && !errorContainer.querySelector(\".error-black-box\")) document.querySelector(\".message-box\").insertAdjacentHTML(\"beforeend\", `<div class=\"black-box-code error-black-box\">\r\n      <div class=\"past-guess-colors\">\r\n          <div class=\"past-guess-color color-${code[0]}\" data-color=\"${code[0]}\" ></div>\r\n          <div class=\"past-guess-color color-${code[1]}\" data-color=\"${code[1]}\" ></div>\r\n          <div class=\"past-guess-color color-${code[2]}\" data-color=\"${code[2]}\" ></div>\r\n          <div class=\"past-guess-color color-${code[3]}\" data-color=\"${code[3]}\" ></div>\r\n      </div></div>`);\n        else document.querySelector(\".error-black-box\")?.remove();\n    }\n};\nconst resetPage = function() {\n    pastGuessesContainer.innerHTML = \"\";\n    pastGuesses = [];\n    guess.fill(\"_\");\n    document.querySelectorAll(\".color-guess\").forEach((el)=>el.style.backgroundColor = \"white\");\n    guessesLeft = 10;\n    errorContainer.classList.add(\"deleted\");\n    successContainer.classList.add(\"deleted\");\n    hintElementContainer.classList.add(\"deleted\");\n    playerWon = false;\n    const uniqueCode = new Set();\n    while(uniqueCode.size < 4)uniqueCode.add(colors[Math.floor(Math.random() * colors.length)]);\n    code.forEach((_, i)=>code[i] = [\n            ...uniqueCode\n        ][i]);\n};\nconst submitInit = function() {\n    submitBtn.addEventListener(\"click\", checkGuess.bind(null, guess, code)); //PUT INTO FUNCTION LATER\n};\nconst resetInit = function() {\n    resetBtn.addEventListener(\"click\", resetPage);\n};\nsubmitInit();\nresetInit();\n\n//# sourceMappingURL=index.a90cbc37.js.map\n","const codeGuesses = Array.from(\r\n  document.querySelectorAll(\".guess-and-color-selection\")\r\n);\r\nconst colors = [\r\n  \"blue\",\r\n  \"grey\",\r\n  \"yellow\",\r\n  \"red\",\r\n  \"orange\",\r\n  \"green\",\r\n  \"white\",\r\n  \"pink\",\r\n];\r\nconst containerColors = document.querySelector(\".container-colors\");\r\nlet pastGuesses = [];\r\nconst errorContainer = document.getElementById(\"error-container\");\r\nconst successContainer = document.getElementById(\"success-container\");\r\nconst hintElementContainer = document.querySelector(\".hint-information\");\r\nconst sidebarRules = document.querySelector(\".rules\");\r\nconst submitBtn = document.querySelector(\".submit-button\");\r\nconst toggleSidebarBtn = document.querySelector(\".toggle-sidebar\");\r\n\r\nconst resetBtn = document.querySelector(\".reset\");\r\nconst pastGuessesContainer = document.querySelector(\".past-guesses\");\r\nlet guessesLeft = 10;\r\nlet playerWon = false;\r\nclass Guess {\r\n  guess;\r\n  allColors;\r\n  #parentElement = document.querySelector(\".past-guesses\");\r\n  #hintElementContainer = document.querySelector(\".hint-information\");\r\n  #rightColorRightSpot;\r\n  #rightColorWrongSpot;\r\n  #wrongColor;\r\n  constructor(guess, rightColorRightSpot, rightColorWrongSpot, wrongColor) {\r\n    this.guess = [...guess];\r\n    this.#rightColorRightSpot = rightColorRightSpot;\r\n    this.#rightColorWrongSpot = rightColorWrongSpot;\r\n    this.#wrongColor = wrongColor;\r\n    this.allColors = this.guess.join(\",\");\r\n  }\r\n  renderGuess() {\r\n    //EDIT AFTERWARDS TO ADD ICONS\r\n    const htmlGuessLog = `<div data-id = \"${\r\n      pastGuesses.indexOf(this) + 1\r\n    }\"class=\"past-guess past-guess-${\r\n      (pastGuesses.indexOf(this) + 1) % 2 === 0 ? \"even\" : \"odd\"\r\n    }\">\r\n        <div data-id = \"${\r\n          pastGuesses.indexOf(this) + 1\r\n        }\"class=\"spot-icon right-color-right-spot-icon\">${\r\n      this.#rightColorRightSpot\r\n    }</div>\r\n        <div data-id = \"${pastGuesses.indexOf(this) + 1}\"class=\"black-box-code\">\r\n            <div data-id = \"${\r\n              pastGuesses.indexOf(this) + 1\r\n            }\"class=\"past-guess-colors\">\r\n                <div class=\"past-guess-color color-${\r\n                  this.guess[0]\r\n                }\" data-id = \"${pastGuesses.indexOf(this) + 1}\"data-color = \"${\r\n      this.guess[0]\r\n    }\"></div>\r\n                <div class=\"past-guess-color color-${\r\n                  this.guess[1]\r\n                }\" data-id = \"${pastGuesses.indexOf(this) + 1}\"data-color = \"${\r\n      this.guess[1]\r\n    }\"></div>\r\n                <div class=\"past-guess-color color-${\r\n                  this.guess[2]\r\n                }\" data-id = \"${pastGuesses.indexOf(this) + 1}\"data-color = \"${\r\n      this.guess[2]\r\n    }\"></div>\r\n                <div class=\"past-guess-color color-${\r\n                  this.guess[3]\r\n                }\" data-id = \"${pastGuesses.indexOf(this) + 1}\"data-color = \"${\r\n      this.guess[3]\r\n    }\"></div>\r\n            </div>\r\n        </div>\r\n        <div data-id = \"${\r\n          pastGuesses.indexOf(this) + 1\r\n        }\"class=\"spot-icon right-color-wrong-spot-icon\">${\r\n      this.#rightColorWrongSpot\r\n    }</div>\r\n\r\n\r\n</div>`;\r\n    const htmlHintBox = `<li class=\"clue right-color-right-spot\">\r\n<div\r\n  class=\"hint-icon spot-icon right-color-right-spot-icon\"\r\n></div>\r\n<p class=\"guess-infomation\">\r\n  ${this.#rightColorRightSpot} color${\r\n      this.#rightColorRightSpot > 1 || this.#rightColorRightSpot === 0\r\n        ? \"s are\"\r\n        : \" is\"\r\n    } in the code, and in the right spot\r\n</p>\r\n</li>\r\n<li class=\"clue right-color-wrong-spot\">\r\n<div\r\n  class=\"hint-icon spot-icon right-color-wrong-spot-icon\"\r\n></div>\r\n<p class=\"guess-infomation\">\r\n  ${this.#rightColorWrongSpot} color${\r\n      this.#rightColorWrongSpot > 1 || this.rightColorWrongSpot === 0\r\n        ? \"s are\"\r\n        : \" is\"\r\n    } in the code, but in the wrong spot\r\n</p>\r\n</li>\r\n<li class=\"clue wrong-color\">\r\n<div class=\"hint-icon spot-icon wrong-color-icon\"></div>\r\n<p class=\"guess-infomation\">\r\n  ${this.#wrongColor} color${\r\n      this.#wrongColor > 1 || this.#wrongColor === 0 ? \"s are\" : \" is\"\r\n    } not in the code at all\r\n</p>\r\n</li>\r\n\r\n</ul>`;\r\n    this.#parentElement.insertAdjacentHTML(\"afterbegin\", htmlGuessLog);\r\n    this.#hintElementContainer.classList.remove(\"deleted\");\r\n    this.#hintElementContainer.innerHTML = \"\";\r\n    this.#hintElementContainer.insertAdjacentHTML(\"afterbegin\", htmlHintBox);\r\n  }\r\n}\r\nconst initializeCode = function () {\r\n  const uniqueCode = new Set();\r\n  while (uniqueCode.size < 4) {\r\n    uniqueCode.add(colors[Math.floor(Math.random() * colors.length)]);\r\n  }\r\n  return [...uniqueCode];\r\n};\r\nconst gameInit = function () {\r\n  codeGuesses.forEach(function (el, i) {\r\n    el.insertAdjacentHTML(\r\n      \"afterbegin\",\r\n      `<div class=\"color-selector hidden\" data-guess-num=\"${i + 1}\">\r\n    <button data-color=\"red\"title=\"color\" class=\"color color-red\"></button>\r\n    <button data-color=\"blue\" title=\"color\" class=\"color color-blue\"></button>\r\n    <button data-color=\"green\"title=\"color\" class=\"color color-green\"></button>\r\n    <button data-color=\"yellow\" title=\"color\" class=\"color color-yellow\"></button>\r\n    <button data-color=\"orange\"title=\"color\" class=\"color color-orange\"></button>\r\n    <button data-color=\"pink\"title=\"color\" class=\"color color-pink\"></button>\r\n    <button data-color=\"grey\"title=\"color\" class=\"color color-grey\"></button>\r\n    <button data-color=\"white\"title=\"color\" class=\"color color-white\"></button>\r\n\r\n    </button>\r\n</div>`\r\n    );\r\n  });\r\n};\r\nconst code = initializeCode();\r\ngameInit();\r\n\r\nconst guessInit = function () {\r\n  const guess = new Array(4);\r\n  guess.fill(\"_\");\r\n  codeGuesses.forEach(function (codeGuess) {\r\n    codeGuess\r\n      .querySelector(\".color-guess\")\r\n      .addEventListener(\"mouseenter\", function (e) {\r\n        const colorSelector = codeGuess.querySelector(\".color-selector\");\r\n        colorSelector.classList.remove(\"hidden\");\r\n        if (!errorContainer.classList.contains(\"deleted\")) {\r\n          errorContainer.classList.add(\"deleted\");\r\n        }\r\n\r\n        codeGuess.addEventListener(\"mouseleave\", function (e) {\r\n          colorSelector.classList.add(\"hidden\");\r\n        });\r\n      });\r\n  });\r\n  containerColors.addEventListener(\"click\", function (e) {\r\n    if (e.target.closest(\".color\")) {\r\n      const guessPosition = e.target.parentElement.dataset.guessNum;\r\n      const color = e.target.dataset.color;\r\n      guess[guessPosition - 1] = color;\r\n      e.target.parentElement.parentElement.querySelector(\r\n        \".color-guess\"\r\n      ).style.backgroundColor = color;\r\n    }\r\n    //FIX AFTERWARDS TO ADD CLICK EVENT\r\n\r\n    //     if (e.target.closest('color-guess')) {\r\n    //        //CODE GOES HERE\r\n    //     }\r\n  });\r\n  pastGuessesContainer.addEventListener(\"click\", function (e) {\r\n    const clickTarget = e.target;\r\n    if (e.target.closest(\".past-guess\")) {\r\n      const id = clickTarget.dataset.id;\r\n      const container = Array.from(\r\n        document.querySelectorAll(\".past-guess\")\r\n      ).reduce(\r\n        (containerEl, curEl) => (curEl.dataset.id === id ? curEl : containerEl),\r\n        \"\"\r\n      );\r\n      const pastGuessedColors = container.querySelectorAll(\".past-guess-color\");\r\n      pastGuessedColors.forEach(function (passedGuessedColorEl, i) {\r\n        const color = passedGuessedColorEl.dataset.color;\r\n        guess[i] = color;\r\n        // pastGuesses[id - 1].guess[id - 1] = color;\r\n        document.querySelectorAll(\".color-guess\")[i].style.backgroundColor =\r\n          color;\r\n      });\r\n    }\r\n  });\r\n  toggleSidebarBtn.addEventListener(\"click\", function (e) {\r\n    e.preventDefault();\r\n    sidebarRules.classList.toggle(\"hidden-sidebar\");\r\n    const status = sidebarRules.classList.contains(\"hidden-sidebar\")\r\n      ? \"hidden\"\r\n      : \"showing\";\r\n    toggleSidebarBtn.textContent = `${\r\n      status === \"hidden\" ? \"Show\" : \"Hide\"\r\n    } Rules!`;\r\n  });\r\n\r\n  return guess;\r\n};\r\nconst guess = guessInit();\r\n\r\n//Function that will check the guess, some some actions but ultimately will will return true or false based on whether the user got the code right or not\r\nconst checkGuess = function (guess, code) {\r\n  let rightColorWrongSpot = 0;\r\n  let rightColorRightSpot = 0;\r\n  let wrongColor = 0;\r\n  try {\r\n    if (guessesLeft < 1)\r\n      throw new Error(\r\n        `Error: No guesses remaining. To start over, click the \"Start Over\" button`\r\n      );\r\n    if (playerWon)\r\n      throw new Error(\r\n        'You have already guessed the code! Please click the \"Start Over\" button to play again!'\r\n      );\r\n    if (guess.includes(\"_\"))\r\n      throw new Error(\"Error: Some guesses have not been assigned a color\");\r\n    if (\r\n      pastGuesses.some(\r\n        (pastGuess) => pastGuess.guess.join(\"\") === guess.join(\"\")\r\n      )\r\n    )\r\n      throw new Error(\"Error : Sequence has already been guessed\");\r\n    if (new Set(guess).size < 4)\r\n      throw new Error(\"Error: No duplicate colors allowed\");\r\n    guess.forEach(function (color, i) {\r\n      if (code.includes(color)) {\r\n        if (code[i] === color) {\r\n          rightColorRightSpot++;\r\n        } else {\r\n          rightColorWrongSpot++;\r\n        }\r\n      } else {\r\n        wrongColor++;\r\n      }\r\n    });\r\n    if (rightColorRightSpot < 4) {\r\n      pastGuesses.push(\r\n        new Guess(\r\n          [...guess],\r\n          rightColorRightSpot,\r\n          rightColorWrongSpot,\r\n          wrongColor\r\n        )\r\n      );\r\n      pastGuesses[pastGuesses.length - 1].renderGuess();\r\n      guessesLeft--; //MOVE TO DIFFERENT FUNCTION AFTERWARDS\r\n      if (guessesLeft < 1) {\r\n        throw new Error(\r\n          `Sorry, you have run out of guesses! The correct guess was:`\r\n        );\r\n      }\r\n      guess.fill(\"_\");\r\n      document\r\n        .querySelectorAll(\".color-guess\")\r\n        .forEach((el) => (el.style.backgroundColor = \"white\"));\r\n    } else {\r\n      //END GAME - PROMPT USER TO CLICK A NEW BUTTON TO START OVER\r\n      //   successContainer.classList?.remove(\"deleted\");\r\n      successContainer.classList.remove(\"deleted\");\r\n      successContainer.querySelector(\".message-text\").textContent =\r\n        'You guessed the code! Congratulations! If you want to play again, click the \"Start Over\" button!';\r\n      playerWon = true;\r\n      hintElementContainer.classList.add(\"deleted\");\r\n    }\r\n  } catch (err) {\r\n    successContainer.classList.add(\"deleted\");\r\n    // document.querySelector('.header-mastermind').style.marginBotton = '12.8rem'\r\n    errorContainer.classList.remove(\"deleted\");\r\n    hintElementContainer.classList.add(\"deleted\");\r\n    errorContainer.querySelector(\".message-text\").textContent = err.message;\r\n    if (\r\n      err.message.startsWith(\"Sorry,\") &&\r\n      !errorContainer.querySelector(\".error-black-box\")\r\n    ) {\r\n      document.querySelector(\".message-box\").insertAdjacentHTML(\r\n        \"beforeend\",\r\n        `<div class=\"black-box-code error-black-box\">\r\n      <div class=\"past-guess-colors\">\r\n          <div class=\"past-guess-color color-${code[0]}\" data-color=\"${code[0]}\" ></div>\r\n          <div class=\"past-guess-color color-${code[1]}\" data-color=\"${code[1]}\" ></div>\r\n          <div class=\"past-guess-color color-${code[2]}\" data-color=\"${code[2]}\" ></div>\r\n          <div class=\"past-guess-color color-${code[3]}\" data-color=\"${code[3]}\" ></div>\r\n      </div></div>`\r\n      );\r\n    } else {\r\n      document.querySelector(\".error-black-box\")?.remove();\r\n    }\r\n  }\r\n};\r\nconst resetPage = function () {\r\n  pastGuessesContainer.innerHTML = \"\";\r\n  pastGuesses = [];\r\n  guess.fill(\"_\");\r\n  document\r\n    .querySelectorAll(\".color-guess\")\r\n    .forEach((el) => (el.style.backgroundColor = \"white\"));\r\n  guessesLeft = 10;\r\n  errorContainer.classList.add(\"deleted\");\r\n  successContainer.classList.add(\"deleted\");\r\n  hintElementContainer.classList.add(\"deleted\");\r\n\r\n  playerWon = false;\r\n  const uniqueCode = new Set();\r\n  while (uniqueCode.size < 4) {\r\n    uniqueCode.add(colors[Math.floor(Math.random() * colors.length)]);\r\n  }\r\n  code.forEach((_, i) => (code[i] = [...uniqueCode][i]));\r\n};\r\nconst submitInit = function () {\r\n  submitBtn.addEventListener(\"click\", checkGuess.bind(null, guess, code)); //PUT INTO FUNCTION LATER\r\n};\r\nconst resetInit = function () {\r\n  resetBtn.addEventListener(\"click\", resetPage);\r\n};\r\nsubmitInit();\r\nresetInit();\r\n"],"names":["codeGuesses","Array","from","document","querySelectorAll","colors","containerColors","querySelector","pastGuesses","errorContainer","getElementById","successContainer","hintElementContainer","sidebarRules","submitBtn","toggleSidebarBtn","resetBtn","pastGuessesContainer","guessesLeft","playerWon","Guess","guess","allColors","parentElement","rightColorRightSpot","rightColorWrongSpot","wrongColor","constructor","join","renderGuess","htmlGuessLog","indexOf","htmlHintBox","insertAdjacentHTML","classList","remove","innerHTML","code","initializeCode","uniqueCode","Set","size","add","Math","floor","random","length","forEach","el","i","guessInit","fill","codeGuess","addEventListener","e","colorSelector","contains","target","closest","guessPosition","dataset","guessNum","color","style","backgroundColor","clickTarget","id","container","reduce","containerEl","curEl","pastGuessedColors","passedGuessedColorEl","preventDefault","toggle","status","textContent","checkGuess","Error","includes","some","pastGuess","push","err","message","startsWith","bind","_"],"version":3,"file":"index.a90cbc37.js.map"}